        -:    0:Source:D:/Code/Clion/software_engineering/lab1_git/DirectedGraph.cpp
        -:    0:Graph:D:\Code\Clion\software_engineering\lab1_git\cmake-build-debug\CMakeFiles\BlackTest.dir\test\test_black.cpp.gcno
        -:    0:Data:D:\Code\Clion\software_engineering\lab1_git\cmake-build-debug\CMakeFiles\BlackTest.dir\test\test_black.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <algorithm>
        -:    2:#include <cstdlib>
        -:    3:#include <fstream>
        -:    4:#include <iostream>
        -:    5:#include <limits>
        -:    6:#include <map>
        -:    7:#include <queue>
        -:    8:#include <random>
        -:    9:#include <set>
        -:   10:#include <sstream>
        -:   11:#include <stack>
        -:   12:#include <string>
        -:   13:#include <vector>
        -:   14:using namespace std;
        -:   15:
        -:   16:// 有向图类定义
        -:   17:class DirectedGraph {
        -:   18:private:
        -:   19:  // 邻接表表示的有向图
        -:   20:  // 所有节点集合
        -:   21:  map<string, double> pageRank; // PageRank值存储
        -:   22:
        -:   23:  // 预处理文本：转换为小写，移除标点符号和非字母字符
        -:   24:  string preprocessText(const string &text) {
        -:   25:    string result;
        -:   26:    for (char c : text) {
        -:   27:      if (isalpha(c)) {
        -:   28:        result += tolower(c);
        -:   29:      } else if (isspace(c) || c == '\n' || c == '\r') {
        -:   30:        result += ' ';
        -:   31:      }
        -:   32:      // 忽略其他所有字符
        -:   33:    }
        -:   34:    return result;
        -:   35:  }
        -:   36:
        -:   37:  // 分割文本为单词列表
        -:   38:  vector<string> splitWords(const string &text) {
        -:   39:    vector<string> words;
        -:   40:    stringstream ss(text);
        -:   41:    string word;
        -:   42:    while (ss >> word) {
        -:   43:      words.push_back(word);
        -:   44:    }
        -:   45:    return words;
        -:   46:  }
        -:   47:
        -:   48:  // 生成DOT格式的图描述
        -:   49:  string generateDotFormat() const {
        -:   50:    stringstream dot;
        -:   51:    dot << "digraph G {\n";
        -:   52:    dot << "  rankdir=LR;\n";
        -:   53:    dot << "  node [shape=circle];\n";
        -:   54:
        -:   55:    // 添加所有节点
        -:   56:    for (const auto &node : nodes) {
        -:   57:      dot << "  \"" << node << "\";\n";
        -:   58:    }
        -:   59:
        -:   60:    // 添加所有边
        -:   61:    for (const auto &from : adjacencyList) {
        -:   62:      for (const auto &to : from.second) {
        -:   63:        dot << "  \"" << from.first << "\" -> \"" << to.first << "\" [label=\""
        -:   64:            << to.second << "\"];\n";
        -:   65:      }
        -:   66:    }
        -:   67:
        -:   68:    dot << "}\n";
        -:   69:    return dot.str();
        -:   70:  }
        -:   71:
        -:   72:public:
        -:   73:  // 从文本构建有向图
        -:   74:  void buildGraphFromText(const string &filename) {
        -:   75:    ifstream file(filename);
        -:   76:    if (!file.is_open()) {
        -:   77:      cerr << "Error: Could not open file " << filename << endl;
        -:   78:      return;
        -:   79:    }
        -:   80:
        -:   81:    string line;
        -:   82:    string fullText;
        -:   83:    while (getline(file, line)) {
        -:   84:      fullText += preprocessText(line) + " ";
        -:   85:    }
        -:   86:    file.close();
        -:   87:
        -:   88:    vector<string> words = splitWords(fullText);
        -:   89:    if (words.empty()) {
        -:   90:      cerr << "Error: No valid words found in the file." << endl;
        -:   91:      return;
        -:   92:    }
        -:   93:
        -:   94:    // 构建邻接表
        -:   95:    for (size_t i = 0; i < words.size() - 1; i++) {
        -:   96:      string from = words[i];
        -:   97:      string to = words[i + 1];
        -:   98:      nodes.insert(from);
        -:   99:      nodes.insert(to);
        -:  100:      adjacencyList[from][to]++;
        -:  101:    }
        -:  102:  }
        -:  103:
        -:  104:  // 展示有向图并保存为图形文件
        -:  105:  void showDirectedGraph() {
        -:  106:    cout << "Directed Graph:" << endl;
        -:  107:    cout << "----------------" << endl;
        -:  108:    for (const auto &node : nodes) {
        -:  109:      cout << node << " -> ";
        -:  110:      if (adjacencyList.find(node) != adjacencyList.end()) {
        -:  111:        bool first = true;
        -:  112:        for (const auto &edge : adjacencyList.at(node)) {
        -:  113:          if (!first)
        -:  114:            cout << ", ";
        -:  115:          cout << edge.first << "(" << edge.second << ")";
        -:  116:          first = false;
        -:  117:        }
        -:  118:      }
        -:  119:      cout << endl;
        -:  120:    }
        -:  121:    cout << "----------------" << endl;
        -:  122:
        -:  123:    // 生成并保存 DOT 文件
        -:  124:    std::string dotContent = generateDotFormat();
        -:  125:    std::ofstream dotFile("graph.dot");
        -:  126:    if (dotFile.is_open()) {
        -:  127:      dotFile << dotContent;
        -:  128:      dotFile.close();
        -:  129:      std::cout << "Graph DOT file saved as graph.dot" << std::endl;
        -:  130:
        -:  131:      // 尝试使用Graphviz生成图片，并指定输出路径
        -:  132:      std::string outputPath =
        -:  133:          "D:/Code/Clion/software_engineering/lab1/graph.png";
        -:  134:#ifdef _WIN32
        -:  135:      std::string command = "dot -Tpng graph.dot -o " + outputPath;
        -:  136:      system(command.c_str());
        -:  137:#else
        -:  138:      std::string command =
        -:  139:          "dot -Tpng graph.dot -o " + outputPath + " 2>/dev/null";
        -:  140:      system(command.c_str());
        -:  141:#endif
        -:  142:      std::cout << "Graph image saved as " << outputPath
        -:  143:                << " (if Graphviz is installed)" << std::endl;
        -:  144:    } else {
        -:  145:      std::cerr << "Error: Could not save graph DOT file" << std::endl;
        -:  146:    }
        -:  147:  }
        -:  148:
        -:  149:  // 查询桥接词（改进输出格式）
function _ZN13DirectedGraph16queryBridgeWordsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ called 0 returned 0% blocks executed 0%
    #####:  150:  string queryBridgeWords(const string &word1, const string &word2) {
    #####:  151:    string w1 = word1;
    %%%%%:  151-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  152:    string w2 = word2;
    %%%%%:  152-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  153:    transform(w1.begin(), w1.end(), w1.begin(), ::tolower);
    %%%%%:  153-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    #####:  154:    transform(w2.begin(), w2.end(), w2.begin(), ::tolower);
    %%%%%:  154-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
        -:  155:
        -:  156:    // 检查单词是否存在
    #####:  157:    if (nodes.find(w1) == nodes.end() && nodes.find(w2) == nodes.end()) {
    %%%%%:  157-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  157-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  157-block  2
call    7 never executed
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%:  157-block  3
call   11 never executed
branch 12 never executed (fallthrough)
branch 13 never executed
    %%%%%:  157-block  4
    %%%%%:  157-block  5
    %%%%%:  157-block  6
branch 14 never executed (fallthrough)
branch 15 never executed
    $$$$$:  157-block  7
    $$$$$:  157-block  8
    $$$$$:  157-block  9
    $$$$$:  157-block 10
    #####:  158:      return "No \"" + word1 + "\" or \"" + word2 + "\" in the graph!";
    %%%%%:  158-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  158-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  158-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  158-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  158-block  4
    %%%%%:  158-block  5
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$:  158-block  6
call   15 never executed
    $$$$$:  158-block  7
call   16 never executed
    $$$$$:  158-block  8
call   17 never executed
    $$$$$:  158-block  9
    $$$$$:  158-block 10
    $$$$$:  158-block 11
    #####:  159:    } else if (nodes.find(w1) == nodes.end()) {
    %%%%%:  159-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  159-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    $$$$$:  159-block  2
    $$$$$:  159-block  3
    #####:  160:      return "No \"" + word1 + "\" in the graph!";
    %%%%%:  160-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  160-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  160-block  2
    %%%%%:  160-block  3
call    6 never executed
    $$$$$:  160-block  4
call    7 never executed
    $$$$$:  160-block  5
    #####:  161:    } else if (nodes.find(w2) == nodes.end()) {
    %%%%%:  161-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  161-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    $$$$$:  161-block  2
    $$$$$:  161-block  3
    #####:  162:      return "No \"" + word2 + "\" in the graph!";
    %%%%%:  162-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  162-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  162-block  2
    %%%%%:  162-block  3
call    6 never executed
    $$$$$:  162-block  4
call    7 never executed
    $$$$$:  162-block  5
        -:  163:    }
        -:  164:
    #####:  165:    set<string> bridgeWords;
    %%%%%:  165-block  0
call    0 never executed
        -:  166:    // 获取word1的所有出边节点
    #####:  167:    if (adjacencyList.find(w1) != adjacencyList.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  167-block  0
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    $$$$$:  167-block  1
    $$$$$:  167-block  2
    #####:  168:      for (const auto &edge : adjacencyList.at(w1)) {
    %%%%%:  168-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  168-block  1
call    3 never executed
call    4 never executed
    %%%%%:  168-block  2
call    5 never executed
call    6 never executed
    %%%%%:  168-block  3
call    7 never executed
branch  8 never executed
branch  9 never executed (fallthrough)
    #####:  169:        string potentialBridge = edge.first;
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  170:        // 检查potentialBridge是否有到word2的边
    #####:  171:        if (adjacencyList.find(potentialBridge) != adjacencyList.end() &&
    %%%%%:  171-block  0
call    0 never executed
call    1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed (throw)
    %%%%%:  171-block  1
call    4 never executed
branch  5 never executed (fallthrough)
branch  6 never executed
    %%%%%:  171-block  2
    %%%%%:  171-block  3
    $$$$$:  171-block  4
    $$$$$:  171-block  5
    #####:  172:            adjacencyList.at(potentialBridge).find(w2) !=
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  172-block  0
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:  172-block  1
    #####:  173:                adjacencyList.at(potentialBridge).end()) {
    %%%%%:  173-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  173-block  1
call    3 never executed
    %%%%%:  173-block  2
call    4 never executed
    %%%%%:  173-block  3
branch  5 never executed (fallthrough)
branch  6 never executed
    $$$$$:  173-block  4
    #####:  174:          bridgeWords.insert(potentialBridge);
    %%%%%:  174-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  174-block  1
    $$$$$:  174-block  2
        -:  175:        }
    #####:  176:      }
    %%%%%:  176-block  0
call    0 never executed
    $$$$$:  176-block  1
call    1 never executed
        -:  177:    }
        -:  178:
    #####:  179:    if (bridgeWords.empty()) {
    %%%%%:  179-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  180:      return "No bridge words from \"" + word1 + "\" to \"" + word2 + "\"!";
    %%%%%:  180-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  180-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  180-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  180-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  180-block  4
    %%%%%:  180-block  5
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$:  180-block  6
call   15 never executed
    $$$$$:  180-block  7
call   16 never executed
    $$$$$:  180-block  8
call   17 never executed
    $$$$$:  180-block  9
    $$$$$:  180-block 10
    $$$$$:  180-block 11
        -:  181:    }
        -:  182:
        -:  183:    string result =
    #####:  184:        "The bridge words from \"" + word1 + "\" to \"" + word2 + "\" ";
    %%%%%:  184-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  184-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  184-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  184-block  3
call    9 never executed
branch 10 never executed (fallthrough)
branch 11 never executed (throw)
    %%%%%:  184-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$:  184-block  5
call   15 never executed
    $$$$$:  184-block  6
call   16 never executed
    $$$$$:  184-block  7
call   17 never executed
    $$$$$:  184-block  8
    $$$$$:  184-block  9
    $$$$$:  184-block 10
    #####:  185:    if (bridgeWords.size() == 1) {
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  186:      result += "is: \"" + *bridgeWords.begin() + "\"";
    %%%%%:  186-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed (throw)
    %%%%%:  186-block  1
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
    %%%%%:  186-block  2
call    8 never executed
branch  9 never executed (fallthrough)
branch 10 never executed (throw)
    %%%%%:  186-block  3
call   11 never executed
call   12 never executed
    $$$$$:  186-block  4
call   13 never executed
    $$$$$:  186-block  5
call   14 never executed
    $$$$$:  186-block  6
    $$$$$:  186-block  7
    $$$$$:  186-block  8
        -:  187:    } else {
    #####:  188:      result += "are: ";
    %%%%%:  188-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    #####:  189:      size_t count = 0;
    #####:  190:      for (const string &word : bridgeWords) {
    %%%%%:  190-block  0
call    0 never executed
call    1 never executed
    %%%%%:  190-block  1
call    2 never executed
    %%%%%:  190-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed (fallthrough)
    #####:  191:        if (count > 0) {
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  192:          if (count == bridgeWords.size() - 1) {
    %%%%%:  192-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed
    #####:  193:            result += " and ";
    %%%%%:  193-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  194:          } else {
    #####:  195:            result += ", ";
    %%%%%:  195-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  196:          }
        -:  197:        }
    #####:  198:        result += "\"" + word + "\"";
    %%%%%:  198-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
    %%%%%:  198-block  1
call    3 never executed
branch  4 never executed (fallthrough)
branch  5 never executed (throw)
    %%%%%:  198-block  2
call    6 never executed
branch  7 never executed (fallthrough)
branch  8 never executed (throw)
    %%%%%:  198-block  3
call    9 never executed
call   10 never executed
    $$$$$:  198-block  4
call   11 never executed
    $$$$$:  198-block  5
call   12 never executed
    $$$$$:  198-block  6
    $$$$$:  198-block  7
    #####:  199:        count++;
call    0 never executed
        -:  200:      }
        -:  201:    }
    #####:  202:    result += ".";
    %%%%%:  202-block  0
call    0 never executed
branch  1 never executed (fallthrough)
branch  2 never executed (throw)
        -:  203:
    #####:  204:    return result;
    %%%%%:  204-block  0
call    0 never executed
    #####:  205:  }
call    0 never executed
    %%%%%:  205-block  0
call    1 never executed
    %%%%%:  205-block  1
call    2 never executed
call    3 never executed
    $$$$$:  205-block  2
call    4 never executed
    $$$$$:  205-block  3
call    5 never executed
    $$$$$:  205-block  4
call    6 never executed
    $$$$$:  205-block  5
call    7 never executed
        -:  206:
        -:  207:  // 根据桥接词生成新文本
        -:  208:  string generateNewText(const string &inputText) {
        -:  209:    string processedText = preprocessText(inputText);
        -:  210:    vector<string> words = splitWords(processedText);
        -:  211:    if (words.size() < 2) {
        -:  212:      return inputText; // 不足两个单词，无法插入桥接词
        -:  213:    }
        -:  214:
        -:  215:    string result;
        -:  216:    random_device rd;
        -:  217:    mt19937 gen(rd());
        -:  218:
        -:  219:    for (size_t i = 0; i < words.size() - 1; i++) {
        -:  220:      result += words[i] + " ";
        -:  221:
        -:  222:      string w1 = words[i];
        -:  223:      string w2 = words[i + 1];
        -:  224:
        -:  225:      // 检查单词是否存在
        -:  226:      if (nodes.find(w1) == nodes.end() || nodes.find(w2) == nodes.end()) {
        -:  227:        continue;
        -:  228:      }
        -:  229:
        -:  230:      set<string> bridgeWords;
        -:  231:      // 获取桥接词
        -:  232:      if (adjacencyList.find(w1) != adjacencyList.end()) {
        -:  233:        for (const auto &edge : adjacencyList.at(w1)) {
        -:  234:          string potentialBridge = edge.first;
        -:  235:          if (adjacencyList.find(potentialBridge) != adjacencyList.end() &&
        -:  236:              adjacencyList.at(potentialBridge).find(w2) !=
        -:  237:                  adjacencyList.at(potentialBridge).end()) {
        -:  238:            bridgeWords.insert(potentialBridge);
        -:  239:          }
        -:  240:        }
        -:  241:      }
        -:  242:
        -:  243:      if (!bridgeWords.empty()) {
        -:  244:        // 随机选择一个桥接词
        -:  245:        uniform_int_distribution<> dis(0, bridgeWords.size() - 1);
        -:  246:        int index = dis(gen);
        -:  247:        auto it = bridgeWords.begin();
        -:  248:        advance(it, index);
        -:  249:        result += *it + " ";
        -:  250:      }
        -:  251:    }
        -:  252:    result += words.back(); // 添加最后一个单词
        -:  253:
        -:  254:    return result;
        -:  255:  }
        -:  256:
        -:  257:  // 计算两个单词之间的最短路径（增加单单词功能）
        -:  258:  string calcShortestPath(const string &word1, const string &word2 = "") {
        -:  259:    string w1 = word1;
        -:  260:    string w2 = word2;
        -:  261:    transform(w1.begin(), w1.end(), w1.begin(), ::tolower);
        -:  262:    transform(w2.begin(), w2.end(), w2.begin(), ::tolower);
        -:  263:
        -:  264:    // 检查单词是否存在
        -:  265:    if (nodes.find(w1) == nodes.end()) {
        -:  266:      return "No \"" + word1 + "\" in the graph!";
        -:  267:    }
        -:  268:
        -:  269:    // 单单词模式：计算到所有其他节点的最短路径
        -:  270:    if (w2.empty()) {
        -:  271:      string result = "Shortest paths from \"" + word1 + "\":\n";
        -:  272:
        -:  273:      // Dijkstra算法实现（单源最短路径）
        -:  274:      map<string, int> distances;
        -:  275:      map<string, string> previous;
        -:  276:      priority_queue<pair<int, string>, vector<pair<int, string>>,
        -:  277:                     greater<pair<int, string>>>
        -:  278:          pq;
        -:  279:
        -:  280:      // 初始化距离
        -:  281:      for (const string &node : nodes) {
        -:  282:        distances[node] = numeric_limits<int>::max();
        -:  283:      }
        -:  284:      distances[w1] = 0;
        -:  285:      pq.push({0, w1});
        -:  286:
        -:  287:      while (!pq.empty()) {
        -:  288:        string current = pq.top().second;
        -:  289:        pq.pop();
        -:  290:
        -:  291:        if (adjacencyList.find(current) == adjacencyList.end()) {
        -:  292:          continue; // 当前节点没有出边
        -:  293:        }
        -:  294:
        -:  295:        for (const auto &edge : adjacencyList.at(current)) {
        -:  296:          string neighbor = edge.first;
        -:  297:          int weight = edge.second;
        -:  298:          int newDist = distances[current] + weight;
        -:  299:
        -:  300:          if (newDist < distances[neighbor]) {
        -:  301:            distances[neighbor] = newDist;
        -:  302:            previous[neighbor] = current;
        -:  303:            pq.push({newDist, neighbor});
        -:  304:          }
        -:  305:        }
        -:  306:      }
        -:  307:
        -:  308:      // 输出所有可达路径
        -:  309:      for (const string &node : nodes) {
        -:  310:        if (node == w1)
        -:  311:          continue;
        -:  312:
        -:  313:        if (distances[node] == numeric_limits<int>::max()) {
        -:  314:          result += "  No path to \"" + node + "\"\n";
        -:  315:          continue;
        -:  316:        }
        -:  317:
        -:  318:        // 构建路径字符串
        -:  319:        stack<string> path;
        -:  320:        string current = node;
        -:  321:        while (current != w1) {
        -:  322:          path.push(current);
        -:  323:          current = previous[current];
        -:  324:        }
        -:  325:        path.push(w1);
        -:  326:
        -:  327:        result += "  To \"" + node + "\": ";
        -:  328:        while (!path.empty()) {
        -:  329:          result += path.top();
        -:  330:          path.pop();
        -:  331:          if (!path.empty()) {
        -:  332:            result += " -> ";
        -:  333:          }
        -:  334:        }
        -:  335:        result += " (Length: " + to_string(distances[node]) + ")\n";
        -:  336:      }
        -:  337:
        -:  338:      return result;
        -:  339:    }
        -:  340:
        -:  341:    // 双单词模式：原功能
        -:  342:    if (nodes.find(w2) == nodes.end()) {
        -:  343:      return "No \"" + word2 + "\" in the graph!";
        -:  344:    }
        -:  345:
        -:  346:    // Dijkstra算法实现
        -:  347:    map<string, int> distances;
        -:  348:    map<string, string> previous;
        -:  349:    priority_queue<pair<int, string>, vector<pair<int, string>>,
        -:  350:                   greater<pair<int, string>>>
        -:  351:        pq;
        -:  352:
        -:  353:    // 初始化距离
        -:  354:    for (const string &node : nodes) {
        -:  355:      distances[node] = numeric_limits<int>::max();
        -:  356:    }
        -:  357:    distances[w1] = 0;
        -:  358:    pq.push({0, w1});
        -:  359:
        -:  360:    while (!pq.empty()) {
        -:  361:      string current = pq.top().second;
        -:  362:      pq.pop();
        -:  363:
        -:  364:      if (current == w2) {
        -:  365:        break; // 找到目标节点
        -:  366:      }
        -:  367:
        -:  368:      if (adjacencyList.find(current) == adjacencyList.end()) {
        -:  369:        continue; // 当前节点没有出边
        -:  370:      }
        -:  371:
        -:  372:      for (const auto &edge : adjacencyList.at(current)) {
        -:  373:        string neighbor = edge.first;
        -:  374:        int weight = edge.second;
        -:  375:        int newDist = distances[current] + weight;
        -:  376:
        -:  377:        if (newDist < distances[neighbor]) {
        -:  378:          distances[neighbor] = newDist;
        -:  379:          previous[neighbor] = current;
        -:  380:          pq.push({newDist, neighbor});
        -:  381:        }
        -:  382:      }
        -:  383:    }
        -:  384:
        -:  385:    if (distances[w2] == numeric_limits<int>::max()) {
        -:  386:      return "No path from \"" + word1 + "\" to \"" + word2 + "\"!";
        -:  387:    }
        -:  388:
        -:  389:    // 构建路径字符串
        -:  390:    stack<string> path;
        -:  391:    string current = w2;
        -:  392:    while (current != w1) {
        -:  393:      path.push(current);
        -:  394:      current = previous[current];
        -:  395:    }
        -:  396:    path.push(w1);
        -:  397:
        -:  398:    string result;
        -:  399:    while (!path.empty()) {
        -:  400:      result += path.top();
        -:  401:      path.pop();
        -:  402:      if (!path.empty()) {
        -:  403:        result += " -> ";
        -:  404:      }
        -:  405:    }
        -:  406:    result += " (Length: " + to_string(distances[w2]) + ")";
        -:  407:
        -:  408:    return result;
        -:  409:  }
        -:  410:
        -:  411:  // 计算PageRank
        -:  412:  double calcPageRank(const string &word, double d = 0.85,
        -:  413:                      int iterations = 100) {
        -:  414:    string w = word;
        -:  415:    transform(w.begin(), w.end(), w.begin(), ::tolower);
        -:  416:
        -:  417:    if (nodes.find(w) == nodes.end()) {
        -:  418:      return -1.0; // 单词不存在
        -:  419:    }
        -:  420:
        -:  421:    // 初始化PageRank值
        -:  422:    double initialRank = 1.0 / nodes.size();
        -:  423:    for (const string &node : nodes) {
        -:  424:      pageRank[node] = initialRank;
        -:  425:    }
        -:  426:
        -:  427:    // 迭代计算PageRank
        -:  428:    for (int i = 0; i < iterations; i++) {
        -:  429:      map<string, double> newRank;
        -:  430:
        -:  431:      // 计算每个节点的新PR值
        -:  432:      for (const string &node : nodes) {
        -:  433:        double sum = 0.0;
        -:  434:
        -:  435:        // 找出所有指向node的节点
        -:  436:        for (const string &inNode : nodes) {
        -:  437:          if (adjacencyList.find(inNode) != adjacencyList.end() &&
        -:  438:              adjacencyList[inNode].find(node) != adjacencyList[inNode].end()) {
        -:  439:            // 计算贡献值: PR(inNode) / L(inNode)
        -:  440:            sum += pageRank[inNode] / adjacencyList[inNode].size();
        -:  441:          }
        -:  442:        }
        -:  443:
        -:  444:        newRank[node] = (1.0 - d) / nodes.size() + d * sum;
        -:  445:      }
        -:  446:
        -:  447:      // 更新PageRank值
        -:  448:      for (const auto &entry : newRank) {
        -:  449:        pageRank[entry.first] = entry.second;
        -:  450:      }
        -:  451:    }
        -:  452:
        -:  453:    return pageRank[w];
        -:  454:  }
        -:  455:
        -:  456:  // 随机游走（改进文件保存）
        -:  457:  string randomWalk() {
        -:  458:    if (nodes.empty()) {
        -:  459:      return "Graph is empty!";
        -:  460:    }
        -:  461:
        -:  462:    // 随机选择一个起始节点
        -:  463:    random_device rd;
        -:  464:    mt19937 gen(rd());
        -:  465:    uniform_int_distribution<> dis(0, nodes.size() - 1);
        -:  466:    auto it = nodes.begin();
        -:  467:    advance(it, dis(gen));
        -:  468:    string current = *it;
        -:  469:
        -:  470:    set<pair<string, string>> visitedEdges;
        -:  471:    string result;
        -:  472:    result += current;
        -:  473:
        -:  474:    while (true) {
        -:  475:      // 检查当前节点是否有出边
        -:  476:      if (adjacencyList.find(current) == adjacencyList.end() ||
        -:  477:          adjacencyList[current].empty()) {
        -:  478:        break;
        -:  479:      }
        -:  480:
        -:  481:      // 随机选择一个出边
        -:  482:      vector<pair<string, int>> edges(adjacencyList[current].begin(),
        -:  483:                                      adjacencyList[current].end());
        -:  484:      uniform_int_distribution<> edgeDis(0, edges.size() - 1);
        -:  485:      int edgeIndex = edgeDis(gen);
        -:  486:      string next = edges[edgeIndex].first;
        -:  487:
        -:  488:      // 检查是否已经访问过这条边
        -:  489:      if (visitedEdges.find({current, next}) != visitedEdges.end()) {
        -:  490:        break;
        -:  491:      }
        -:  492:
        -:  493:      visitedEdges.insert({current, next});
        -:  494:      current = next;
        -:  495:      result += " " + current;
        -:  496:    }
        -:  497:
        -:  498:    // 将结果写入文件
        -:  499:    ofstream outFile(
        -:  500:        "D:\\Code\\Clion\\software_engineering\\lab1\\random_walk.txt");
        -:  501:    if (outFile.is_open()) {
        -:  502:      outFile << result;
        -:  503:      outFile.close();
        -:  504:      cout << "Random walk result saved to "
        -:  505:              "D:\\Code\\Clion\\software_engineering\\lab1\\random_walk.txt"
        -:  506:           << endl;
        -:  507:    }
        -:  508:    // else {
        -:  509:    //   cerr << "Error: Could not save random walk result" << endl;
        -:  510:    // }
        -:  511:
        -:  512:    return result;
        -:  513:  }
        -:  514:  set<string> nodes;
        -:  515:  map<string, map<string, int>> adjacencyList;
        -:  516:};
